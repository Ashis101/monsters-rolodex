{"version":3,"sources":["component/card/card-component.jsx","component/card-list/card-list.component.jsx","component/style-box/style-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","id","name","email","className","alt","src","Cardlist","monsters","map","users","key","Searchbox","placeholder","handelchange","type","onChange","App","check","e","setState","searchContent","target","value","state","fetch","then","data","json","user","this","filtermonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAgBeA,G,kBAbJ,SAACC,GAAS,IAAD,EAEMA,EAAMC,QAArBC,EAFS,EAETA,GAAGC,EAFM,EAENA,KAAKC,EAFC,EAEDA,MACf,OACI,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA2BL,EAA3B,kCACtB,4BAAKC,GACL,2BAAIC,MCKGI,EAXA,SAACR,GAER,OACI,yBAAKK,UAAU,aACdL,EAAMS,SAASC,KAAI,SAAAC,GAAK,OACrB,kBAAC,EAAD,CAAMC,IAAKD,EAAMT,GAAID,QAASU,SCI/BE,G,MAVE,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aAC3B,OACA,2BACAV,UAAU,SACVW,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4BCG,E,YAhCb,aAAc,IAAD,8BACX,+CAYFC,MAAM,SAACC,GACL,EAAKC,SAAS,CAACC,cAAcF,EAAEG,OAAOC,SAZtC,EAAKC,MAAM,CACVxB,QAAQ,GACRqB,cAAc,IAJJ,E,kFAOQ,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAG,GAAI,OAAE,EAAKT,SAAS,CAACpB,QAAQ6B,S,+BAO5B,IAAD,EACwBC,KAAKN,MAA5BxB,EADD,EACCA,QAAQqB,EADT,EACSA,cACTU,EAAc/B,EAAQgC,QAAO,SAAAL,GAClC,OAAQA,EAAKzB,KAAK+B,cAAcC,SAASb,EAAcY,kBAExD,OACE,yBAAK7B,UAAU,OACf,+CACA,kBAAC,EAAD,CAAWS,YAAa,aAAcC,aAAcgB,KAAKZ,QACzD,kBAAC,EAAD,CAAUV,SAAUuB,S,GA3BRI,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.51d99ee4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.style.css'\r\n\r\nconst Card=(props)=>{\r\n\r\n    const {id,name,email}=props.monster\r\n    return(\r\n        <div className='card-container'>\r\n        <img alt='monster' src= {`https://robohash.org/${id}.png?set=set2&size=180 x 180`}/>\r\n        <h3>{name}</h3>\r\n        <p>{email}</p>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport './card-list.stylr.css'\r\nimport Card from '../card/card-component'\r\n\r\nconst Cardlist=(props)=>{\r\n \r\n        return (\r\n            <div className='card-list'>\r\n            {props.monsters.map(users=>\r\n                <Card key={users.id} monster={users} />\r\n                )}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Cardlist","import React from 'react'\r\nimport './style-box.component.css'\r\n\r\n const Searchbox=({placeholder,handelchange})=>{\r\n    return(\r\n    <input\r\n    className='search'\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handelchange} />\r\n    )    \r\n}\r\n\r\nexport default Searchbox","import React,{Component} from 'react';\nimport './App.css';\nimport Cardlist from './component/card-list/card-list.component'\nimport Searchbox from './component/style-box/style-box.component'\nclass App extends Component{\n  constructor(){\n    super()\n    this.state={\n     monster:[],\n     searchContent:''\n    }\n  }\n  componentWillMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(data=>data.json())\n    .then(user=>this.setState({monster:user}))\n  }\n \n  check=(e)=>{\n    this.setState({searchContent:e.target.value})\n  }\n\n  render(){\n    const {monster,searchContent}=this.state\n    const filtermonster=monster.filter(data=>{\n     return  data.name.toLowerCase().includes(searchContent.toLowerCase())\n    })\n    return(\n      <div className=\"App\"> \n      <h1>Monster Rolodex</h1>\n      <Searchbox placeholder={'Search Box'} handelchange={this.check} />\n      <Cardlist monsters={filtermonster}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}